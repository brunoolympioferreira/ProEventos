{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { take, map } from 'rxjs/operators';\nimport { environment } from '@environments/environment';\nimport { PaginatedResult } from '@app/models/Pagination';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let EventoService = /*#__PURE__*/(() => {\n  class EventoService {\n    constructor(http) {\n      this.http = http;\n      this.baseURL = environment.apiURL + 'api/eventos';\n    }\n\n    getEventos(page, itemsPerPage, term) {\n      const paginatedResult = new PaginatedResult();\n      let params = new HttpParams();\n\n      if (page != null && itemsPerPage != null) {\n        params = params.append('pageNumber', page.toString());\n        params = params.append('pageSize', itemsPerPage.toString());\n      }\n\n      if (term != null && term != '') params = params.append('term', term);\n      return this.http.get(this.baseURL, {\n        observe: 'response',\n        params\n      }).pipe(take(1), map(response => {\n        paginatedResult.result = response.body;\n\n        if (response.headers.has('Pagination')) {\n          paginatedResult.pagination = JSON.parse(response.headers.get('Pagination'));\n        }\n\n        return paginatedResult;\n      }));\n    }\n\n    getEventoById(id) {\n      return this.http.get(`${this.baseURL}/${id}`).pipe(take(1));\n    }\n\n    post(evento) {\n      return this.http.post(this.baseURL, evento).pipe(take(1));\n    }\n\n    put(evento) {\n      return this.http.put(`${this.baseURL}/${evento.id}`, evento).pipe(take(1));\n    }\n\n    deleteEvento(id) {\n      return this.http.delete(`${this.baseURL}/${id}`).pipe(take(1));\n    }\n\n    postUpload(eventoId, file) {\n      const fileToUpload = file[0];\n      const formData = new FormData();\n      formData.append('file', fileToUpload);\n      return this.http.post(`${this.baseURL}/upload-image/${eventoId}`, formData).pipe(take(1));\n    }\n\n  }\n\n  EventoService.ɵfac = function EventoService_Factory(t) {\n    return new (t || EventoService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  EventoService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EventoService,\n    factory: EventoService.ɵfac\n  });\n  return EventoService;\n})();","map":null,"metadata":{},"sourceType":"module"}